% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{paramsDIAlignR}
\alias{paramsDIAlignR}
\title{Parameters for the alignment functions}
\usage{
paramsDIAlignR()
}
\value{
A list of parameters:
\item{runType}{(string) must be one of the strings "DIA_Proteomics", "DIA_IPF", "DIA_Metabolomics".}
\item{chromFile}{(string) must either be "mzML" or "sqMass".}
\item{maxFdrQuery}{(numeric) a numeric value between 0 and 1. It is used to filter peptides from osw file which have SCORE_MS2.QVALUE less than itself.}
\item{maxFdrQuery}{(numeric) A numeric value between 0 and 1. It is used to filter features from osw file which have SCORE_IPF.QVALUE less than itself. (For PTM IPF use)}
\item{maxPeptideFdr}{(numeric) a numeric value between 0 and 1. It is used to filter peptides from osw file which have SCORE_PEPTIDE.QVALUE less than itself.}
\item{analyteFDR}{(numeric) the upper limit of feature FDR to be it considered for building tree.}
\item{treeDist}{(string) the method used to build distance matrix. Must be either "rsquared" or "count.}
\item{context}{(string) used in pyprophet peptide. Must be either "run-specific", "experiment-wide", or "global".}
\item{unalignedFDR}{(numeric) must be between 0 and maxFdrQuery. Features below unalignedFDR are
 considered for quantification even without the RT alignment.}
\item{alignedFDR}{(numeric) must be between unalignedFDR and 1. Features below alignedFDR are
 considered for quantification after the alignment.}
\item{level}{(string) apply maxPeptideFDR on Protein as well if specified as "Protein". Default: "Peptide".}
\item{integrationType}{(string) method to ompute the area of a peak contained in XICs. Must be
 from "intensity_sum", "trapezoid", "simpson".}
\item{baseSubtraction}{{logical} TRUE: remove background from peak signal using estimated noise levels.}
\item{baselineType}{(string) method to estimate the background of a peak contained in XICs. Must be
 from "none", "base_to_base", "vertical_division_min", "vertical_division_max".}
\item{fitEMG}{(logical) enable/disable exponentially modified gaussian peak model fitting.}
\item{recalIntensity}{(logical) recalculate intensity for all analytes.}
\item{fillMissing}{(logical) calculate intensity for ananlytes for which features are not found.}
\item{XICfilter}{(string) must be either sgolay, boxcar, gaussian, loess or none.}
\item{polyOrd}{(integer) order of the polynomial to be fit in the kernel.}
\item{kernelLen}{(integer) number of data-points to consider in the kernel.}
\item{globalAlignment}{(string) must be either "loess" or "linear".}
\item{globalAlignmentFdr}{(numeric) a numeric value between 0 and 1. Features should have m-score lower than this value for participation in LOESS fit.}
\item{globalAlignmentSpan}{(numeric) spanvalue for LOESS fit. For targeted proteomics 0.1 could be used.}
\item{RSEdistFactor}{(numeric) defines how much distance in the unit of rse remains a noBeef zone.}
\item{normalization}{(string) must be selected from "mean", "l2".}
\item{simMeasure}{(string) must be selected from dotProduct, cosineAngle, crossCorrelation,
  cosine2Angle, dotProductMasked, euclideanDist, covariance and correlation.}
\item{alignType}{(numeric) available alignment methods are "global", "local" and "hybrid".}
\item{goFactor}{(numeric) penalty for introducing first gap in alignment. This value is multiplied by base gap-penalty.}
\item{geFactor}{(numeric) penalty for introducing subsequent gaps in alignment. This value is multiplied by base gap-penalty.}
\item{cosAngleThresh}{(numeric) in simType = dotProductMasked mode, angular similarity should be higher than cosAngleThresh otherwise similarity is forced to zero.}
\item{OverlapAlignment}{(logical) an input for alignment with free end-gaps. False: Global alignment, True: overlap alignment.}
\item{dotProdThresh}{(numeric) in simType = dotProductMasked mode, values in similarity matrix higher than dotProdThresh quantile are checked for angular similarity.}
\item{gapQuantile}{(numeric) must be between 0 and 1. This is used to calculate base gap-penalty from similarity distribution.}
\item{kerLen}{(integer) In simType = crossCorrelation, length of the kernel used to sum similarity score. Must be an odd number.}
\item{hardConstrain}{(logical) if FALSE; indices farther from noBeef distance are filled with distance from linear fit line.}
\item{samples4gradient}{(numeric) modulates penalization of masked indices.}
\item{fillMethod}{(string) must be either "spline", "sgolay" or "linear".}
\item{splineMethod}{(string) must be either "fmm" or "natural".}
\item{mergeTime}{(string) must be either "ref", "avg", "refStart" or "refEnd".}
\item{keepFlanks}{(logical) TRUE: Flanking chromatogram is not removed.}
\item{fraction}{(integer) indicates which fraction to align.}
\item{fractionNum}{(integer) Number of fractions to divide the alignment.}
\item{lossy}{(logical) if TRUE, time and intensity are lossy-compressed in generated sqMass file.}
\item{useIdentifying}{(logical) Set TRUE to use identifying transitions in alignment. (DEFAULT: FALSE)}
}
\description{
Retention alignment requires OpenSWATH/pyProphet extracted features and chromatograms. This function provides
a suite of parameters used for selecting features and manipulating chromatograms. Chromatogram
alignment can be performed via reference based or progressively via rooted or unrooted tree. This
function provides sensible parameters for these tasks.
}
\examples{
params <- paramsDIAlignR()
}
\seealso{
\code{\link{checkParams}, \link{alignTargetedRuns}}
}
\author{
Shubham Gupta, \email{shubh.gupta@mail.utoronto.ca}

ORCID: 0000-0003-3500-8152

License: (c) Author (2020) + GPL-3
Date: 2020-07-11
}
